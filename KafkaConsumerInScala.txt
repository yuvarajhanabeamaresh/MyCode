
import java.util.{Collections, Properties}

import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerConfig
import org.apache.kafka.clients.producer.ProducerRecord
import scala.collection.JavaConverters._
import org.apache.kafka.clients.consumer._
import org.apache.kafka.common.serialization.{StringDeserializer, StringSerializer}
object KafkaConsumerInScala {
  def main(args: Array[String]): Unit = {


    val a= new StringDeserializer
    val bootstrapServers = "127.0.0.1:9092"
    val consumerProperties= new Properties()
    consumerProperties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,bootstrapServers)
    consumerProperties.setProperty(ConsumerConfig.GROUP_ID_CONFIG,"test-group")
    consumerProperties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, a.getClass.getName)
    consumerProperties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG,a.getClass.getName)
    consumerProperties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG,a.getClass.getName)
    val topics = List("test")
    val consumer = new KafkaConsumer[String,String](consumerProperties)
    //consumer.subscribe(Collections.singletonList("test"))
    //subscribe method expects java collection as an argument
    consumer.subscribe(topics.asJavaCollection)
   while(true)
     {

       val records = consumer.poll(200)
       for (record <- records.asScala)
         {
           println("Topic: " + record.topic() +
             ",Key: " + record.key() +
             ",Value: " + record.value() +
             ", Offset: " + record.offset() +
             ", Partition: " + record.partition())

         }
     }

  }
}
